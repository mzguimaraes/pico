pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
--menu stuff; cycles through states
--------------------------------
state = 3
mapx = 0
mapy = 0
gravity = 0.3
shake = 0
score = 0

--player related variables
p1={x=8,y=48,w=12,h=9,vx=0,
vy=0,rx=0,ry=0,s=1,f=false,t=0,
grounded=false,i=0,pounce = false, 
pt = 0, meat = 0, hurt = false
,health = 5, ht = 0}
dogf = 0
dogf2 = 0

--sky related info
clouds = {}
bigcloud = {x=0,y=0,c=14}

--animal related variables
--x ~ 40 to 768
animals = {}

blood = {x=1000,y=1000,t = 0,s=140}

function _init()
	_spawncloud(10)
	_spawnanim(10)
	_spawnbear(5)
end

function _update60()
	if(state == 1) then
		_up1()
	elseif(state == 2) then
		_up2()
	else
		_up3()
	end

end

function _draw()

		cls()

 	if(state == 1) then
 		_d1()
 	elseif(state == 2) then
 		_d2()
 	else
 		_d3()
 	end
end

--adds clouds here
function _spawncloud(x)
 
 for i=0, x do
 	add(clouds, {x=-10+rnd(300), 
 	y=6+rnd(30),c = rnd(4)})
 	
 end
end

--spawns prey animals
function _spawnanim(x)
	
	for i=0, x do
 	local an = rnd(10)
 	local di = rnd(1)

 	
 	--rabbit (50%)
 	if(an < 5)then
 		if(di < 0.5) then
 			add(animals,{x=i*60+100,y=30,w=8,h=8,vx=-0.4,
vy=0,rx=0,ry=0,s=104,f=false,t=0,eat = false,
grounded = false, i=0, health=1,
alive = true, hurt = false,ani = 1,
f0 = 104, f1 = 120,f2= 105, f3 = 121,
f4 = 120, f5 = 105, f6=121,spd = 0.4})
 		
 		else
 			add(animals,{x=i*60+100,y=30,w=8,h=8,vx=0.4,
vy=0,rx=0,ry=0,s=104,f=true,t=0,eat = false,
grounded = false, i=0, health=1,
alive = true, hurt = false,ani = 1,
f0 = 104, f1 = 120,f2= 105, f3 = 121,
f4 = 120, f5 = 105, f6=121,spd = 0.4})
 		end
 		
		 	--deer (20%)
 	elseif(an <7) then
 	
 		if(di < 0.5) then
 			add(animals,{x=i*60+100,y=30,w=12,h=16,vx=-0.25,
vy=0,rx=0,ry=0,s=76,f=false,t=0,eat = false,
grounded = false, i=0, health=3,
alive = true, hurt = false,ani = 2,
f0 = 76, f1 = 78,f2= 110, f3 = 128,
f4 = 160, f5 = 130, f6=162, spd = 0.25})
 		else
 		
 		add(animals,{x=i*60+100,y=30,w=12,h=16,vx=0.25,
vy=0,rx=0,ry=0,s=76,f=true,t=0,eat = false,
grounded = false, i=0, health=3,
alive = true, hurt = false,ani = 2,
f0 = 76, f1 = 78,f2= 110, f3 = 128,
f4 = 160, f5 = 130, f6=162, spd = 0.25})
 		end
 	--bird (30%)
 	else
 	 if(di < 0.5) then
 			add(animals,{x=i*60+100,y=30,w=8,h=8,vx=-0.85,
vy=0,rx=0,ry=0,s=74,f=false,t=0,eat = false,
grounded = false, i=0, health=1,
alive = true, hurt = false,ani = 4,
f0 = 74, f1 = 90,f2= 75, f3 = 90,
f4 = 75, f5 = 90, f6=75,spd = 0.85})
 		else
 			add(animals,{x=i*60+100,y=30,w=8,h=8,vx=0.85,
vy=0,rx=0,ry=0,s=74,f=true,t=0,eat = false,
grounded = false, i=0, health=1,
alive = true, hurt = false,ani = 4,
f0 = 74, f1 = 90,f2= 75, f3 = 90,
f4 = 75, f5 = 90, f6=75,spd = 0.85})
 		end
 	end
 end
end

--number of bears must be uniform
function _spawnbear(x)
	
	for i=0,x do
	
		add(animals,{x=i*100+140,y=30,w=15,h=14,vx=0.15,
vy=0,rx=0,ry=0,s=104,f=true,t=0,eat = false,
grounded = false, i=0, health=1000,
alive = true, hurt = false,ani = 3,
f0 = 134, f1 = 136,f2= 166, f3 = 136,
f4 = 138, f5 = 168, f6=138,spd = 0.15})
	end
end
-->8
--state 1: primary gameplay
-------------------------------
minx = 10
maxx = 80
miny = 10
maxy = 60
thresh = 1
cam = {x=0,y=0}


function _up1()
	dogf+=1
	dogf2+=1
	
	--player feeding their cub
	if(p1.x <= 1.5) and
	(p1.grounded == true) then
		if(p1.meat >0) then
			sfx(3)
		end
		score += p1.meat
		p1.meat = 0
	end
	
		if(p1.grounded == false) then
			if (p1.hurt == false) and 
			btnp(üÖæÔ∏è)then
  		p1.vy+=gravity/4
  	else
   	p1.vy+=gravity/1.2
  	end
 	else
 		if(p1.ht <= 0) then
 			p1.hurt = false
 		else
 			p1.ht -= 1
 		end
 	end
  
  --handle movement buttons
  if(p1.pounce == false) and
  (p1.hurt == false) then
  if btn(‚û°Ô∏è)then
   p1.vx=1
   p1.f=false 
  elseif btn(‚¨ÖÔ∏è) then
   p1.vx=-1
   p1.f=true --flip if going left
  else p1.vx*=0.8 --slow to a stop
  end
  
  --jump if grounded
  if btnp(üÖæÔ∏è) and p1.grounded then
   p1.vy=-4
 	end 
 	end
 	
 	if btnp(5,0) and p1.grounded then
 		p1.vy = -3
 		p1.pounce = true
			 	
 	end
		
		if btn(5,0) and p1.grounded == false then
			p1.pounce = true
		else
			p1.pounce = false
			if(p1.pt > 0) then
				p1.pt -= 1
			else
				p1.pt = 0
			end
		end
		
		--cannot pounce while hurt
		if(p1.hurt == true) then
 		p1.pounce = false
 		p1.s = 73
 	end
 	
 	--affects the vx based on pounce
 	if(p1.pounce == true) then
 		 if(p1.grounded ==true)then
 				p1.pounce = false
 			else
 				if(p1.pt < 50) then
 					p1.pt += 1
 				else
 					p1.pt = 50
 				end
 				if(p1.f == false) then
 					p1.vx = 5-(p1.pt/10)
 				else
 				p1.vx = -5+(p1.pt/10)
 				end
 			end	
 	end

		--calculates animal movement
		for a in all(animals) do
			_animanim(a)
		end
		
		--calculates player movement
 	move(p1,p1.vx,p1.vy,nil,landonwall)
		
		if(p1.x < 0) then
			p1.x = 0
		end
		
 
end

function _d1()
		--map & screen reset here
		_drawsky()
		cam.x = p1.x
		cam.y = p1.y
		
		--won't move camera past limits
		if(cam.x < 64) then
			cam.x = 64
		end
		if(cam.x > 750) then
			cam.x = 750
		end
		if(cam.y <0) then
			cam.y = 0
		end
		if(shake > 0) then
			shake-= 0.2
			_shakecam(shake)
		else
			shake = 0
		end
		camera(cam.x-64,cam.y-40)
 	palt(1,true) 
 	palt(0,false) 
 
 	
 	_animplayer()
 	
 	--player death = game over
 	if(p1.health <= 0) then
 		state = 2
 	end
 	

		_animblood()
		
		--map drawn after creatures
		map(mapx,mapy,0,16,256,256)
		
		for a in all(animals) do
 			spr(a.s,a.x,a.y+(16-a.h),flr(a.w/8+0.5),flr(a.h/8+0.5),a.f)
 	end
 	
		--ui drawn last
			_drawui()
end



-->8
--sky draw/background info
-------------------------------
--draws a giant blue tile
function _drawsky()
	sspr(0,9,8,4,cam.x-64,cam.y-40,16*8,16*8)
	_drawsun()
	_drawclouds()
end

--draws a black box then info
function _drawui()
	--black boxes drawn here:
	sspr(0,25,8,4,cam.x-64,cam.y-40,16*8,6)
	sspr(0,25,8,4,cam.x-64,cam.y+64,16*8,16*4)

	--score display drawn here:
	print("score: "..tostr(score),cam.x-60,cam.y-40,7)
	--meat display drawn here:
	spr(54,cam.x+37,cam.y+68,1,1)
	print("x "..tostr(p1.meat),cam.x+48,cam.y+70,7)

	--shows how much pounce left
	spr(38,cam.x-12,cam.y+68,1,1)
	line(cam.x-2,cam.y+70,
	cam.x-2+(5-(p1.pt/10))*7,cam.y+70,10)
	line(cam.x-2,cam.y+71,
	cam.x-2+(5-(p1.pt/10))*7,cam.y+71,10)
	line(cam.x-2,cam.y+72,
	cam.x-2+(5-(p1.pt/10))*7,cam.y+72,10)
	
	--draws the player's health
	spr(22,cam.x-61,cam.y+68,1,1)
	line(cam.x-53,cam.y+70,
	cam.x-53+(p1.health*7),cam.y+70,8)
	line(cam.x-53,cam.y+71,
	cam.x-53+(p1.health*7),cam.y+71,8)
	line(cam.x-53,cam.y+72,
	cam.x-53+(p1.health*7),cam.y+72,8)
end

--draws the sun (moves it too)
function _drawsun()
	spr(44,cam.x-1,cam.y-20,2,2)
end

--draws the clouds (moves it too)
function _drawclouds()
	for c in all(clouds) do
	c.x -= 0.16
	
	if(c.c < 1) then
		spr(46,cam.x+c.x, cam.y+c.y,1,1)
	elseif(c.c <2) then
		spr(47,cam.x+c.x, cam.y+c.y,1,1)
	elseif(c.c < 3) then
		spr(62,cam.x+c.x, cam.y+c.y,1,1)
	else
		spr(63,cam.x+c.x, cam.y+c.y,1,1)
	end
	
	if(c.x < -72) then
		c.x = 160 + rnd(160)
		c.y = 6+rnd(30)
	end
end
	bigcloud.x -= 0.1
	spr(bigcloud.c,cam.x+bigcloud.x, cam.y+bigcloud.y,2,2)

	if(bigcloud.x < -80) then
		bigcloud.x = 180 + rnd(160)
		bigcloud.y = 2+rnd(30)
	end
end



--draws all animated sprites
function _testanimations()
	if(deerf < 10) then
			spr(78,30,30,2,2)
			spr(105,50,30,1,1)
			spr(75,60,30,1,1)
			spr(136,30,50,2,2)
			spr(192,50,50,2,2)
		elseif(deerf < 20) then
			spr(110,30,30,2,2)
			spr(120,50,30,1,1)
			spr(90,60,30,1,1)
			spr(166,30,50,2,2)
			spr(140,50,50,2,2)
		elseif(deerf < 30) then
			spr(128,30,30,2,2)
			spr(121,50,30,1,1)
			spr(75,60,30,1,1)
			spr(136,30,50,2,2)
			spr(142,50,50,2,2)
		elseif(deerf < 40) then
			spr(160,30,30,2,2)
			spr(105,50,30,1,1)
			spr(90,60,30,1,1)
			spr(138,30,50,2,2)
			spr(174,50,50,2,2)
		elseif(deerf < 50) then
			spr(130,30,30,2,2)
			spr(120,50,30,1,1)
			spr(75,60,30,1,1)
			spr(168,30,50,2,2)
			spr(224,50,50,2,2)
		elseif(deerf < 60) then
			spr(162,30,30,2,2)
			spr(121,50,30,1,1)
			spr(90,60,30,1,1)
			spr(138,30,50,2,2)
		end
		
		if(deerf >= 59) then
			deerf = 0
		end
end

--adjusts & picks player sprite
function _animplayer()
 	--player idle anim
 if(p1.grounded == true) then
 	if(p1.vx < 0.1) and (p1.vx > -0.1) then
 		
 		if(p1.i >= 120) then
 			 if(dogf > 15) then
 						p1.s = 96
 					if(dogf >= 45) then
 						dogf = 0
 					end
 				else
 						p1.s = 112
 				end
 				
 			p1.h = 8
 		else	
 			p1.s = 64
 			p1.i+= 1
 		end
 	else
 		p1.i = 0
 		dogf2 += 1
 		if(dogf2 >= 49) then
 			dogf2 = 0
 		end
 		if(dogf2 < 10) then
 			p1.s = 66
 			p1.h = 11
 		elseif(dogf2 < 20) then
 			p1.s = 98
 			p1.h = 11
 		elseif(dogf2 < 30) then
 			p1.s = 68
 			p1.h = 11
 		elseif(dogf2 < 40) then
 			p1.s = 100
 			p1.h = 11
 		elseif(dogf2 < 50) then
 			p1.s = 98
 			p1.h = 11
 		end
 	end
 
 --if the player is airborne
 else
 	p1.h = 11
 	if(p1.vy > 0) then
 		if(p1.pounce == true) then
 		 if(p1.vy < 1) then
 				p1.s = 100
 			else
 				p1.s = 102
 			end
 		else
 			p1.s = 68
 		end
 	else
 		if(p1.pounce == true) then
 				p1.s = 72
 		else
 		p1.s = 100
 		end
 	end
	end
 	
 	if(p1.h > 8) then
 		spr(p1.s,p1.x,p1.y+(16-p1.h),2,2,p1.f,p1.hurt)
 	else
 		spr(p1.s,p1.x,p1.y+(16-p1.h),2,1,p1.f)
 	end
end

function _animblood()
	blood.t += 1
	
	if(blood.t < 10) then
		blood.s = 192
	elseif(blood.t < 20) then
		blood.s = 140
	elseif(blood.t < 30) then
		blood.s = 142
	elseif(blood.t < 40) then
		blood.s = 174
	elseif(blood.t < 50) then
		blood.s = 224
	else
		blood.s = nil
	end
	
	if(blood.s) then
		spr(blood.s,blood.x,blood.y,2,2)
	end
end
-->8
--collision/movement data 
--collision/movement data 
--------------------------------
function overlapmap(x,y)
--function returns true if there
--is a tile with flag n that
--overlaps a sprite at x,y

 --first we need to know
 --which cels it is touching
 local minmapx=flr((x+8)/8)
 local maxmapx=flr((x+14)/8)
 local minmapy=flr((y+1)/8)
 local maxmapy=flr((y+7)/8)
 
 --walls have flag 0
 if fget(mget(minmapx+mapx-1,minmapy+mapy-1),0) then
  return true
 elseif fget(mget(minmapx+mapx,maxmapy+mapy-1),0) then
  return true
 elseif fget(mget(maxmapx+mapx,minmapy+mapy-1),0) then
  return true
 elseif fget(mget(maxmapx+mapx,maxmapy+mapy-1),0) then
  return true
 else
  return false
 end
end

--moves object by amtx,amty
--one pixel at a time
--stop moving if hit a wall
--and calls function if it
--touches on x or y

--based on matt thorson's 
--towerfall blog post
function move(s,amtx,amty,oncollidex,oncollidey)
 --increment move counter with move amount
 s.rx+=amtx
 s.ry+=amty


 --round to nearest pixel value
 local movex=flr(s.rx+0.5)
	local movey=flr(s.ry+0.5)
	
 if movex==0 and movey==0 then return end 

 s.rx-=movex
	
 local sign=sgn(movex)
 
 --move 1 pixel at a time unless
 --collision detected - then stop
 while movex~=0 do
  if overlapmap(s.x+sign,s.y)==false then
   --move 1 pixel
   s.x+=sign
   --decrement counter
   movex-=sign
  else
   --stop and do not move
   
   if oncollidex~=nil then
    oncollidex(s) 
   end
   break
   
  end
 end
 
 --now do the same in y
 s.ry-=movey
 sign=sgn(movey)
 
 if(overlapmap(s.x,s.y+sign)==false) then
 	s.grounded=false
 end
 
 while movey~=0 do
  if overlapmap(s.x,s.y+sign)==false then
   --move 1 pixel
   s.y+=sign
   --decrement counter
   movey-=sign
   s.grounded=false
  else
   --stop and do not move
   s.vy=0
   --call collide if we landed
   if oncollidey~=nil and sign==1 then
    oncollidey(s) end
   break
  end
 end
end

function landonwall(s)
 --sprite s hit wall with direction d
 s.grounded=true
end

--changes direction
function reversedir(s)
	s.vx*=-1
	
	if(s.vx > 0) then
		s.f = true
	else
		s.f = false
	end
	
	if(rnd(1) < 0.5) then
		jump(s)
	end
end

--causes the targt to jump
function jump(s)
	s.vy = -4
			if(s.vx > s.spd) then  
			s.vx = s.spd
		elseif(s.vx < -s.spd) then
			s.vx = -s.spd
		end
	if(s.vx > 0) then
		s.vx = s.spd
	end
	
	if(rnd(1) < 0.3) then
		reversedir(s)
	end
	
	if(s.vx > 0) then
		s.f = true
	else
		s.f = false
	end
end

--x = intesity of shaking
function _shakecam(x)
	cam.x += rnd(x)-rnd(x)
	cam.y += rnd(x)-rnd(x)
end
-->8
--animal controls ai here:
--1=rabbit,2=deer,3=bear, 4=bird
-------------------------------

--checks if player is colliding
--with an animal
function _animcol(p,t)
	
	if(p.x < t.x+(t.w)) and (p.x + (p.w) > t.x)
	and(p.y+p.h > t.y) and (p.y < t.y + t.h) then
		return true	
	end
	return false
end

--takes animal, then 
--shows it how to move
function _animanim(d)

	--falls, even if dead
	if(d.grounded == false) then
			if(d.ani == 4) then
				d.vy += gravity/3
			else
				d.vy += gravity
			end
	else
		if(d.vy > 0) then
			d.vy = 0
		end
		
		if(d.vx > d.spd) then  
			d.vx = d.spd
		elseif(d.vx < -d.spd) then
			d.vx = -d.spd
		end
	end

--birds have unique movement
if(d.ani == 4) then
	if(d.grounded == true) then
		d.vx = 0
		
		--bird lands from air
		if(d.t > 0) then
			d.t = -60 + flr(rnd(30))
			d.s = d.f0
		end
		
	--bird flies every once and a while
	if(d.t == 0) then
		jump(d)
		d.vx = d.spd
	end
	end
end
	
--only animate if alive
if(d.alive == true) then
	--first, advances animation
	d.t += 1
	
	if(vx ~= 0) then
		if(d.t >= 0) and (d.t < 10) then
			d.s = d.f1
		elseif(d.t < 20) then
			d.s = d.f2
		elseif(d.t < 30) then
			d.s = d.f3
		elseif(d.t < 40) then
			d.s = d.f4
		elseif(d.t < 50) then
			d.s = d.f5
		elseif(d.t < 60) then
			d.s = d.f6
		end
	else
		if(d.t >= 0) then
			d.s = d.f0
		end
	end
	--resets animation tracker
	if(d.t >= 59) then
		d.t = 0
	end

	if(d.t < 0) then
		if(d.ani == 2) then
			d.s = 108
		elseif(d.ani == 2) then
			d.s = d.f0
		elseif(d.ani == 3) then
			if(d.hurt == true) then
				d.s = 164
			else
				d.s = 170
			end
		end
	else
		d.hurt = false
	end
	
	--here determine how animal
	--reacts to hitting a wall
	if(d.hurt == false) and
	(d.t > 0) then
		if(d.ani ~= 2) then
			move(d,d.vx,d.vy,jump,landonwall)
		else
			move(d,d.vx,d.vy,reversedir,landonwall)
		end
		
	--don't move if hurt
	else
		move(d,0,d.vy,reversedir,landonwall)
	end
	

	
	--after moving, check collision
	local hit = _animcol(p1,d)

	--if hit, then
	if(hit == true) then
	
		--if the player is pouncing...
		if(p1.pounce == true) and 
		(d.hurt == false) then
		if(d.ani == 2) then
			sfx(2)
			d.health -= (p1.pt/30) + 1
			d.s = 108
		elseif(d.ani == 1) or (d.ani == 4)then
			sfx(1)
			d.health -= (p1.pt/30) + 1
		end
			d.t = -60
			d.hurt = true	
			blood.t = 0
			blood.x = p1.x
			blood.y = p1.y
		end
		
		--if player touches bear
		if (d.ani == 3) then
			
			d.s = 164
			d.t = -60
			d.hurt = true	
			--damages and launches the p		
			if(p1.hurt == false) then
				sfx(0)
				p1.health -= (p1.pt/30) + 1
				p1.hurt = true
				p1.ht = 24
				p1.vy = -4
				p1.vx = -d.vx * 3
				p1.meat = 0
				shake = 5
			end
		end
		
		--if the animal dies...	
		if(d.health < 0) then
			d.alive = false
			d.t = -1000
			
			--rabbit
			if(d.ani == 1) then
				p1.meat+=1
				d.s = 122
				d.h = 8
			
			--bird	
			elseif(d.ani == 4) then
				p1.meat +=1
				d.h = 8
				if(d.grounded == true) then
					d.s = 123
				else
					d.s = 91
				end
			
			--deer
			elseif(d.ani == 2) then
				sfx(1)
				p1.meat += 3
				d.s = 132
			end
		end
	end

--if dead...
elseif(d.eat == false) then
	move(d,0,d.vy,nil,landonwall)

	if(d.grounded == true) then
	
	for b in all(animals) do
		if(b.ani == 3) then
			--and it touches a bear...
			if(_animcol(b,d)==true) and
				(b.alive == true) then
				b.hurt = false
  		b.t = -60
				b.s = 170
		
				_respawn(d)
			end
		end
	end
	d.t += 1
	if(d.t >= 0) then
		_respawn(d)
	end
	end
end
end

--moves an eaten animal off screen
function _respawn(d)
	d.y = 30
	
	--keeps moving until off-camera
	while(d.x > cam.x - 70) and 
	(d.x < cam.x + 70) do
		d.x = rnd(760)
	end
	
	--restores animal health
	if(d.ani == 2) then
		d.health = 3
	else
		d.health = 1
	end
	d.t = 0
	d.alive = true
end
-->8
--state 2/3: game over/title
-------------------------------
function _up2()
	
end

--game over screen stuff
function _d2()
	camera(0,0)
		print("game over",
		40,40,8)
		print("final score:",
	36,60,7)
		print(tostr(score),
	56,70,14)
end

--title screen stuff here
function _up3()
	if(btn(5,0) or btn(4,0)) then
		state = 1
	end
end

function _d3()
	spr(194,24,40,10,2)
	print("a game by charles yu",
	24,66,1)
	print("press 'z' to continue",
	22,74,13)
end
-->8
--default animal values
-------------------------------
--deer default values
dee = {x=80,y=30,w=12,h=16,vx=0.25,
vy=0,rx=0,ry=0,s=76,f=true,t=0,eat = false,
grounded = false, i=0, health=3,
alive = true, hurt = false,ani = 2,
f0 = 76, f1 = 78,f2= 110, f3 = 128,
f4 = 160, f5 = 130, f6=162, spd = 0.25}

--rabbit default values
rab = {x=100,y=30,w=8,h=8,vx=0.4,
vy=0,rx=0,ry=0,s=104,f=true,t=0,eat = false,
grounded = false, i=0, health=1,
alive = true, hurt = false,ani = 1,
f0 = 104, f1 = 120,f2= 105, f3 = 121,
f4 = 120, f5 = 105, f6=121,spd = 0.4}

--bird default values
bir = {x=100,y=30,w=8,h=8,vx=0.85,
vy=0,rx=0,ry=0,s=74,f=true,t=0,eat = false,
grounded = false, i=0, health=1,
alive = true, hurt = false,ani = 4,
f0 = 74, f1 = 90,f2= 75, f3 = 90,
f4 = 75, f5 = 90, f6=75,spd = 0.85}

--bear default values
bea = {x=100,y=30,w=15,h=14,vx=0.15,
vy=0,rx=0,ry=0,s=104,f=true,t=0,eat = false,
grounded = false, i=0, health=1000,
alive = true, hurt = false,ani = 3,
f0 = 134, f1 = 136,f2= 166, f3 = 136,
f4 = 138, f5 = 168, f6=138,spd = 0.15}

__gfx__
00000000111111111111111111111111000000000000000033333333133331331bbbbbbbbbbbbbb1bbbbbbbbffffffff66d65fff111111111111111111111111
0000000011111111111111111111111100000000000000003333333313331113bbbbbbbbbbbbbbbbbbbbbbbbffffffff6ddd5fff111111111111111111111111
0070070011111111111111111111111100000000000000003333333313311113bbbbbbbbbbbbbbbbbbbbbbbbffff4fffddffffff111111111111111111111111
0007700011111111111111111111111100000000000000003333333313111111bbbbb3bbbbbb3bbbbbb3bb3bffffffffdfffffff111111111111111111111111
0007700011111111111111111111111100000000000000003366633311111111bbbb3bbb3b3bbbbbb3bbbbbbff4fffffff666fff111111111111111117777711
00700700111111111111111111111111000000000000000033ddd63311111111b3b33bbb33bbbbbbbbb33bbbfffff4ffffddd6ff111111111111111777777777
00000000111111111111111111111111000000000000000063ddddd311111111bb3b33bb3333bbbbb333b3bbf4ff4f4f6fdddddf111111111117777766667777
0000000011111111111111111111111100000000000000003333d3dd11111111bb333333333b33bbb333333b4f44f444ffffdfdd111171771777777666666777
ccccccccbbbbbbbb111111111111111100000000000000000800080011333331b3bbb3bb111111113bb33b3311111111ffffffff444444441177776666777677
ccccccccbbbbbbbb111111111111111100000000000000008880888011133311bb33b33b111111113b3b33b311111111ffffffff444444441117776667777771
ccccccccbbbbbbbb111111111111111100000000000000008788888011133311b333b33b1111111133b33b3311111111ffffffff444444447111777777777711
ccccccccbbbbbbbb1111111111111111000000000000000087888880111333113b3333b3111111113b3333b318111111ffffffff444444441111177771177111
ccccccccbbbbbbbb111111111111111100000000000000008878888011133311336663b3111111113333b3338a811171ffffffff444444441111111111111111
ccccccccbbbbbbbb1111111111111111000000000000000008888800111131113bddd63311b11b1133333333b811111bffffffff444444441111111111111111
ccccccccbbbbbbbb1111111111111111000000000000000000888000111131116bddddd331b111b1333333333b311b1bffffffff444444441111111111111111
ccccccccbbbbbbbb1111111111111111000000000000000000080000111111113b33dbdd333b113b33333333331111b1ffffffff444444441111111111111111
3333333355555555000000000000000000000000000000000005550011111111b3b3b6b3633b333b5555555555666666a1111aaaaaa1111a1111111111111111
333333335555555500000000000000000000000000000000050055551111111133636b363636363356666666656dddd6111aaaaaaaaaa1111117711111111111
3333333355555555000000000000000000000000000000005005555511111111663dddd365d3ddd356dddddd65dddddd11aaaaaaaaaaaa111177671111771111
33333333555555550000000000000000000000000000000050555600111111113dd3dd3dd5ddddd35dddddddd5dddddd1aaaaaaaaaaaaaa17776666111111111
33333333555555550000000000000000000000000000000055565550111111115d3dddddd5dddddd5dddddddd5dddddd1aaaaaaaaaaaaaa11111111111111711
33333333555555550000000000000000000000000000000055560050111511115ddddddd555555555ddddddd55555555aaaaaaaaaaaaaaaa1111111111111111
33333333555555550000000000000000000000000000000055600000155651115dddd555666656665dddd55566665666aaaaaaaaaaaaaaaa1111166111111111
333333335555555500000000000000000000000000000000500000005666651155555666ddd656dd55555666ddd656ddaaaaaaaaaaaaaaaa1111111111111111
0000000000000000000000000000000000000000000000000000444011111111566656ddddd55ddd566656ddddd55dddaaaaaaaaaaaaaaaa1111111111111111
00000000000000000000000000000000000000000000000000044e441111111156d65dddddd56ddd56d65dddddd56dddaaaaaaaaaaaaaaaa1117777111177711
0000000000000000000000000000000000000000000000000004e444111111115ddf5ddddfd5ddfd5ddd5dddddd5ddddaaaaaaaaaaaaaaaa1777777711777771
0000000000000000000000000000000000000000000000000044444411111111f5555ddfddd5dddd55555dddddd5dddd1aaaaaaaaaaaaaa17767766711776671
0000000000000000000000000000000000000000000000000044444011111111dfff6ddddddfdddf566665ddddd5dddd1aaaaaaaaaaaaaa11776677111176667
0000000000000000000000000000000000000000000000000064440011111111fdfdfffdfdfdfdfd5dddd5ddddd5dddd11aaaaaaaaaaaa111177711177776666
0000000000000000000000000000000000000000000000006600000011111111ffdfdfffdfdfffdf5dddd5ddddd5ddd5111aaaaaaaaaa1111111111111111111
0000000000000000000000000000000000000000000000000600000011611551ffffffffffffffff5dddd55555555555a1111aaaaaa1111a1111111111111111
11111111111111111111111111111111111111111551111111111111111111111111111115511111111111111881111117161111111111111716111111111111
117111115511111111111111111111111551111111e5551111111111111111111111111111e5551118881111a808111111776144111111111177614411111111
175711111e5511111111111111111111577511111155505515511111111111111111111111555055a808811118888818111744e111111111111744e111111111
751111111550551111111111155111117175111115557777117511111111111111111111155577771888811117888881114444e111111111114444e111111111
75111111555777111155555111e55511111755555555711111751111111111111111111555557111178888111888888104404441111111110440444111111111
17555555555711111577555511555055111555555555711111175511155555111111155555557115177888811887771144444441111114714444444111111471
15555555557711111571555555557777111555555555555111155551115550551551555557555551177788818111911111174444411111471117444441111147
15557777557111115711555555577111111555577001115511555555555577775775555770011111119788111111111111177444444444471117744444444447
15550177550111111111555755511111111555501100111111555555555771115717555711001111111111811181111111117444444444441111744444444444
11550111150111111111155055711111111155011110011111555755555711115711555711100111188188111881911111117444444444441111744444444444
11555011155011111111115550001111111555011111111111055777755011111511555011111111a80888181887711111110447777774441111044777777444
11111111111111111111115501111111111511111111111111055111155011111111150001111111188888818888711111110441111004441114444111100444
11111111111111111111111111111111111111111111111111105551115550111111155111111111178888718888871111110441111100441154001111110044
11111111111111111111111111111111111111111111111111111111111111111111111511111111117777111888881111110411111110141151101111100044
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111911111858a111110411111110141111101111001141
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111881111110511111110151111101111111151
11111111111111111111111111111111111755111111111111175511111111111167111111116111116711111111111111111111111111111716111111111111
11111111555511111111111115511111117511111511111111751111111111111167111111777711116711111115511116111144111111111177614411111111
11111111155055111111111111e55511117511111155551117511111111111111777111117071111177711115511e551716644e111111111111744e111111111
111111115557771111111111115550551117551111555055175111111111111170777111177777117077711151115505177744e111111111114444e111111111
1155555555571e111111555115557777111555511555777711755511115111117777771711677777777777177555577711444441111111140440444111111111
15755555555711111155555555557111115555555555711111555551115111111167777116777771116777711555571111400444111111474444444111111147
5775557755011111157555555557711111555555555700011555555511e555111177777717117771116767711557551111444454411111471117444441111147
55155550555011111571555775500111155557555555001115555555515550551777777711111671117777711555055110447554444444471117744444444447
11111111111111111571155015555011155557777755111115557555555577771111111111111111111111111111111111116544444444441111744444444444
11111111555511111151155011115111151001111115511115557775555571111111111111671171111111111111111111116444444444441111744444444444
11111555155055111111115551111111151011111111551111550177555700011777711116717711111111111111111111110447777774441111444777777444
11155555555777111111111111111111111111111111111111155111555500117071117117777771111111111111111111110441111004441114440111100444
11555555555711111111111111111111111111111111111111110111775511117777771170776777117161111111119111100441111100441144100111110044
1575557755771111111111111111111111111111111111111111111111155111167777717777777711177211111e18e111101144111110141541100111110014
5775550155011111111111111111111111111111111111111111111111115511777777611177716718287e7118e2888111101114111101141511110111110114
55155550555011111111111111111111111111111111111111111111111111111611776116771111288e86828228882811101115111111151111110111101115
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
17161111111111111716111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111118111111
117761441111111111776144111111111111111111111111111114111111111111111411111111111111141111111111111111111111111111111111e8111111
111744e111111111111744e111111111111111111111111111444e111111111111444e111111111111444e1111111111111111111111111111118e1112111111
114444e111111111114444e111111111111111111111111114444411111111411444441111111111144444111111111111111111111111111111888111111111
04404441111111140440444111111147111111111111111104044444411114440404444441111141040444444111114111111111811111111111111221111111
444444444111114744444444411111471111111111111111444444444444404144444444444414444444444444441444111111188e11111118e1111111112111
11174444444444471117444444444447111111111111111114444444444444111444444444444041144444444444404111111112881111111888111181111181
11117444444444471111744444444444111111111111111111144444444444411114444444444441111444444444444111111111811181111111211111211118
11117444444444441111744444444444111111111111111111144444444444411114444444444441111444444444444111111111211228111111111111111111
11111447777774441110044777777444111117117111111111144444444444111114444444444411111444444444441111228e11112111111821211111111111
11111441111004441101144111110444111171171117111111114444444440111111044444444011111144444444441111228811812111111811111111118111
11111441111100441100144111111044111171171171111111114440114440111110044411444011111444401100441111222281111888e11111811111111881
11114411111144411111114111111440111117ee8441111111111440111440111100044411440011114444401100441111111121112112811811111111181111
11151011111510111111114111114410111188284444811111111440111440111100144111440011114410011100441111111112111111111111111111111111
11110111111101111111115111115110518482424444821811114441114441111111144114441011111110011000441111111111111111111111111111111111
11111111111111111716111111111111111114444411111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1716111111111111117761441111111111114044e111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1177614411111111111744e111111111110400444411111111111411111111111111141111111111111111111111111111111111111111111111811111111e11
111744e111111111114444e111111111114444444411111111444e111111111111444e1111111111111111111111111111111111111111111121111111111111
114444e1111111110440444111111111111717444441111114444411111111411444441111111141111111111111111411111111111111411111111111181111
04404441111111144444444111111147111174444444111104044444411114440404444441111444111111111111114411111111111114441111111111111111
44444444411111471117444441111147644144444444411444444444444440414444444444444041111114444444440411111444444440411111111111111111
11174444444444471117744444444447744414444444404414444444444444111444444444444411111144444444444111114444444444411111111111111111
11117444444444471111744444444444144441444444440411144444444444411114444444444441111444444444444411144444444444441111111111111111
11117444444444441111744444444444114444444444444411144444444444411114444444444441114444444444444441445444444444441811111111111111
11110447777774441111044777777444111444444044444411044444444444111144444444444411414454444444444144445444444444441112111111111181
11110441111004441111044111100444111144440444444410004444444440111444444444444411444454444444440144444544444444011811111111111111
11110441111444411110144111110044111114400444444410011444414440111441100000044411444445444014440144444544401444011111111111111181
11110411111510111110441111111041111111000144444410011144444400111441110000044411444445444011440040404544401144001111181111111111
11111401111110111110411111111041111110001144444011111114444100011111111000014441404045440011440014445444001144001111111111111111
11111511111110111111511111110151111100001444440011111144444110011111110000011441144454410014440014445441001444001111111111111111
11111111111111110000000000000000000000000000000000000000000000000005500005500000000000550000000000000000000000000000000000000000
11111111111111110220000000000000000000000000000000055000000000005505e55555e50655000005665555555500000000000000000000000000000000
11111111111111110002220002280022802222222000000000566550000000065505e55555e50655000006006555555500000000000000000000000000000000
11111111111111110022822002280022802222222000000000606550000000065505556655550655000000006555666600000000000000000000000000000000
11111111111111110228888202280022802288888000000000006550000000065005550065500655000000006555000000000000000000000000000000000000
11111111111111110220008202280022802200000000000000000655065000655005550065500655000000006555000000000000000000000000000000000000
11111111111111110820000802280022802200000000000000000655006500655005550065500655000000006555000000000000000000000000000000000000
1111111111111111008200000222222280222222200ddddddd000655006550650005550065500655000000006555555500000000000000000000000000000000
1111111111111111000822000222222280222222200ddddddd000065506556550005550065500655000000006555555500000000000000000000000000000000
111111188e1111110000882002288822802288888006666666000065506556550005550065500655000000006555666600000000000000000000000000000000
11111118881111110800002202280022802200000000000000000065506556550505550065500655000000006555000000000000000000000000000000000000
11111111211111118200002202280022802200000000000000000006556555550655550065500655555555006555000000000000000000000000000000000000
111118e111e811118200022202280022802222222000000000000006555555550066555555500655555555006555000000000000000000000000000000000000
11111888188811110822222802280022808222222000000000000006555555550000655555000665555555006555000000000000000000000000000000000000
11111128182111110088888002280022808888888000000000000000655065500000066660000066666666006666000000000000000000000000000000000000
11111112221111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12111111111111180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111210000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
12111111111181110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000100010101010100000000010000000000000100010001000000010000000000000001010101000000000000000000000000010101010000000000000000000000000000020202000200000000000000000000000200020202020000000000000000020202000200020000000000000000000202000002020202
0200020000000400040004000000000002020202000004040404040400000000020002000400040004000000000000000202020204040404040402020202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101012a2b3a3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101283a2b3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101012a2b3a3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101012a2b3b3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101012a2b3a3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
6b010101191b0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011b190101010101010101010101010101010101010101013a2b3b3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
111118081818191b010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101080a0a0101010101010101010101010101010101010101012a3a3b3b3b3b3b3b3b3b2100000000000000000000000000000000000000000000000000
180a0a0a282929282a0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101011908181a1a090101010101010101010101010101010101010101012a3b3b3b2a2a2a2a2a2a00000000000000000000000000000000000000000000000000
281829183a3b0c38382a1b010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101191b1919271b191b010108202020201a09011b271901010101010101010101010101010101172121072a2a2b2a2b3b00000000000000000000000000000000000000000000000000
3828392838391c1c0c3a2a0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101080a11110a110a0a180a0a182020202020180a11111109010101010101010101010101010101012121012a2b2a2b3b3b00000000000000000000000000000000000000000000000000
1c1c1c1c1c1c1c1c1c39392a1901011b0119010101010101010101010101010137011b19011b01010101010101010101010101010101081a201a06201a20202020202020200620063b180a0a0a180a1111110901010101010101010101012121013a2a2b3b3b3b00000000000000000000000000000000000000000000000000
1c1c1c1c1c0c1c1c1c1c383a2b18080a0a091b0101010101010101010101012a2a2a281818292a2a2a010101010101010101010101180620202020202020202006203a3b3b2929293b2829280620200a180a1109010101010101010101012121013a2b3b3b3b3b00000000000000000000000000000000000000000000000000
0b0b0b0b0b0b1c1c0c1c0c382928281829180901010101010101010101190101072101283a0721011701010101010101010101012a282928182928282928282828293939393939393938383939060620062028292a0101010101010101012121012b3b3b3b3b3b00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d0b1c1c1c383b3b2b3b282a18182801010101010101011b2801010121012b2b0121010101012a370101010101012a3a3b3b3b283a3b2a3b3b2a3a3b3b1c1c1c1c1c1c1c1c1c1c1c39383939393938282a010101011901372721213738393939393900000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d0b1c1c1c3b3b3b383b392839383901270137010128183a01270121373839012101010119382a01372737012a3838393938393939393939393939391c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c0c1c1c1c1c1c1c1c1c1c00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d0b1c1c1c1c1c1c1c0c1c1c1c1c1c0c1c1c1c1c0c390c1c1c1c1c1c1c0c1c1c1c1c1c1c0c391c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c1c00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b1c0b1c0b0b0b0b1c0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b1c1c1c0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d1d00000000000000000000000000000000000000000000000000
__sfx__
000300003f4503a4503e4501f650156500e7500974004730017200171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400003205036050390503c0503e050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000300003f550375502e5502c55000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000e0000365503555036550355503d5503d5300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0010000027570275502b55027550275502b55027550275502b55027550275502b55027550275502b5502b55026550265502b55026550265502b55026550265502b55026550265502b55026550265502b5502b550
0110000024550245502b55024550245502b55024550245502b55024550245502b55024550245502b5502b5521f5521f5521f5521f5521f5521f5521f5521f5521f5521f5521f5521f5521f5521f5521f5421f520
001000002455024550245502455030550305502b5502b550245502455024550245502f550305502b5502b55024550245502b55024550245502b55024550245502b5502b550245502455022550225502055020550
000100001d4501f4502245024452254522645227452294522b4522e452304523245234452374523a5523b5523c5503d5502e700367003d7003f70000000000000000000000000000000000000000000000000000
